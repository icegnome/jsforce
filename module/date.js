"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

require("core-js/modules/es.array.join");

require("core-js/modules/es.date.to-json");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.match");

require("core-js/modules/web.url.to-json");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = void 0;

var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/parse-int"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _formatter = require("./util/formatter");

/**
 *
 */

/** @private **/
function createLiteralBuilder(literal) {
  return function (num) {
    var _context;

    return new SfDate((0, _concat["default"])(_context = "".concat(literal, ":")).call(_context, String(num)));
  }; // eslint-disable-line no-use-before-define
}
/**
 * A date object to keep Salesforce date literal
 *
 * @class
 * @constructor
 * @see http://www.salesforce.com/us/developer/docs/soql_sosl/Content/sforce_api_calls_soql_select_dateformats.htm
 */


var SfDate = /*#__PURE__*/function () {
  /**
   *
   */
  function SfDate(literal) {
    (0, _classCallCheck2["default"])(this, SfDate);
    (0, _defineProperty2["default"])(this, "_literal", void 0);
    (0, _defineProperty2["default"])(this, "toString", this.toJSON);
    this._literal = literal;
  }
  /**
   * Returns literal when converted to string
   */


  (0, _createClass2["default"])(SfDate, [{
    key: "toJSON",
    value: function toJSON() {
      return this._literal;
    }
  }], [{
    key: "toDateLiteral",

    /**
     * Convert JavaScript date object to ISO8601 Date format (e.g. 2012-10-31)
     *
     * @param {String|Number|Date} date - Input date
     * @returns {SfDate} - Salesforce date literal with ISO8601 date format
     */
    value: function toDateLiteral(date) {
      var _date;

      if (typeof date === 'number') {
        _date = new Date(date);
      } else if (typeof date === 'string') {
        _date = SfDate.parseDate(date);
      } else {
        _date = date;
      }

      var yy = _date.getFullYear();

      var mm = _date.getMonth() + 1;

      var dd = _date.getDate();

      var dstr = [yy, (0, _formatter.zeroPad)(mm), (0, _formatter.zeroPad)(dd)].join('-');
      return new SfDate(dstr);
    }
    /**
     * Convert JavaScript date object to ISO8601 DateTime format
     * (e.g. 2012-10-31T12:34:56Z)
     */

  }, {
    key: "toDateTimeLiteral",
    value: function toDateTimeLiteral(date) {
      var _context2;

      var _date;

      if (typeof date === 'number') {
        _date = new Date(date);
      } else if (typeof date === 'string') {
        _date = SfDate.parseDate(date);
      } else {
        _date = date;
      }

      var yy = _date.getUTCFullYear();

      var mm = _date.getUTCMonth() + 1;

      var dd = _date.getUTCDate();

      var hh = _date.getUTCHours();

      var mi = _date.getUTCMinutes();

      var ss = _date.getUTCSeconds();

      var dtstr = (0, _concat["default"])(_context2 = "".concat([yy, (0, _formatter.zeroPad)(mm), (0, _formatter.zeroPad)(dd)].join('-'), "T")).call(_context2, [(0, _formatter.zeroPad)(hh), (0, _formatter.zeroPad)(mi), (0, _formatter.zeroPad)(ss)].join(':'), "Z");
      return new SfDate(dtstr);
    }
    /**
     * Convert JavaScript date object to ISO8601 time format
     * (e.g. 12:34:56.789Z)
     */

  }, {
    key: "toTimeLiteral",
    value: function toTimeLiteral(time) {
      var _context3, _context4, _context5;

      var _date = new Date(0);

      if (typeof time === 'string') {
        _date = SfDate.parseTime(time);
      } else if (typeof time === 'number') {
        _date = new Date(time);
      } else {
        _date = time;
      }

      var hh = _date.getUTCHours();

      var mi = _date.getUTCMinutes();

      var ss = _date.getUTCSeconds();

      var sss = _date.getUTCMilliseconds();

      var tstr = (0, _concat["default"])(_context3 = (0, _concat["default"])(_context4 = (0, _concat["default"])(_context5 = "".concat((0, _formatter.zeroPad)(hh), ":")).call(_context5, (0, _formatter.zeroPad)(mi), ":")).call(_context4, (0, _formatter.zeroPad)(ss), ".")).call(_context3, (0, _formatter.zeroPad)(sss, 3), "Z");
      return new SfDate(tstr);
    }
    /**
     * Parse IS08601 date(time) formatted string and return date instance
     */

  }, {
    key: "parseDate",
    value: function parseDate(str) {
      var d = new Date();
      var regexp = /^([\d]{4})-?([\d]{2})-?([\d]{2})(T([\d]{2}):?([\d]{2}):?([\d]{2})(.([\d]{3}))?(Z|([+-])([\d]{2}):?([\d]{2})))?$/;
      var m = str.match(regexp);

      if (m) {
        d = new Date(0);

        if (!m[4]) {
          d.setFullYear((0, _parseInt2["default"])(m[1], 10));
          d.setDate((0, _parseInt2["default"])(m[3], 10));
          d.setMonth((0, _parseInt2["default"])(m[2], 10) - 1);
          d.setHours(0);
          d.setMinutes(0);
          d.setSeconds(0);
          d.setMilliseconds(0);
        } else {
          d.setUTCFullYear((0, _parseInt2["default"])(m[1], 10));
          d.setUTCDate((0, _parseInt2["default"])(m[3], 10));
          d.setUTCMonth((0, _parseInt2["default"])(m[2], 10) - 1);
          d.setUTCHours((0, _parseInt2["default"])(m[5], 10));
          d.setUTCMinutes((0, _parseInt2["default"])(m[6], 10));
          d.setUTCSeconds((0, _parseInt2["default"])(m[7], 10));
          d.setUTCMilliseconds((0, _parseInt2["default"])(m[9] || '0', 10));

          if (m[10] && m[10] !== 'Z') {
            var offset = (0, _parseInt2["default"])(m[12], 10) * 60 + (0, _parseInt2["default"])(m[13], 10);
            d.setTime((m[11] === '+' ? -1 : 1) * offset * 60 * 1000 + d.getTime());
          }
        }

        return d;
      }

      throw new Error("Invalid date format is specified : ".concat(str));
    }
    /**
     * Parse IS08601 time formatted string and convert to parse string
     */

  }, {
    key: "parseTime",
    value: function parseTime(str) {
      var regexp = /^([\d]{2}):?([\d]{2}):?([\d]{2})(.([\d]{3}))?Z?$/;
      var m = str.match(regexp);

      if (m) {
        var d = new Date(0);
        var hh = (0, _parseInt2["default"])(m[1], 10);
        var mi = (0, _parseInt2["default"])(m[2], 10);
        var ss = (0, _parseInt2["default"])(m[3], 10);
        var sss = (0, _parseInt2["default"])(m[5] || '0', 10);
        d.setUTCHours(hh);
        d.setUTCMinutes(mi);
        d.setUTCSeconds(ss);
        d.setUTCMilliseconds(sss);
        return d;
      }

      throw new Error("Invalid time format is specified : ".concat(str));
    }
  }]);
  return SfDate;
}();

exports["default"] = SfDate;
(0, _defineProperty2["default"])(SfDate, "YESTERDAY", new SfDate('YESTERDAY'));
(0, _defineProperty2["default"])(SfDate, "TODAY", new SfDate('TODAY'));
(0, _defineProperty2["default"])(SfDate, "TOMORROW", new SfDate('TOMORROW'));
(0, _defineProperty2["default"])(SfDate, "LAST_WEEK", new SfDate('LAST_WEEK'));
(0, _defineProperty2["default"])(SfDate, "THIS_WEEK", new SfDate('THIS_WEEK'));
(0, _defineProperty2["default"])(SfDate, "NEXT_WEEK", new SfDate('NEXT_WEEK'));
(0, _defineProperty2["default"])(SfDate, "LAST_MONTH", new SfDate('LAST_MONTH'));
(0, _defineProperty2["default"])(SfDate, "THIS_MONTH", new SfDate('THIS_MONTH'));
(0, _defineProperty2["default"])(SfDate, "NEXT_MONTH", new SfDate('NEXT_MONTH'));
(0, _defineProperty2["default"])(SfDate, "LAST_90_DAYS", new SfDate('LAST_90_DAYS'));
(0, _defineProperty2["default"])(SfDate, "NEXT_90_DAYS", new SfDate('NEXT_90_DAYS'));
(0, _defineProperty2["default"])(SfDate, "LAST_N_DAYS", createLiteralBuilder('LAST_N_DAYS'));
(0, _defineProperty2["default"])(SfDate, "NEXT_N_DAYS", createLiteralBuilder('NEXT_N_DAYS'));
(0, _defineProperty2["default"])(SfDate, "NEXT_N_WEEKS", createLiteralBuilder('NEXT_N_WEEKS'));
(0, _defineProperty2["default"])(SfDate, "LAST_N_WEEKS", createLiteralBuilder('LAST_N_WEEKS'));
(0, _defineProperty2["default"])(SfDate, "NEXT_N_MONTHS", createLiteralBuilder('NEXT_N_MONTHS'));
(0, _defineProperty2["default"])(SfDate, "LAST_N_MONTHS", createLiteralBuilder('LAST_N_MONTHS'));
(0, _defineProperty2["default"])(SfDate, "THIS_QUARTER", new SfDate('THIS_QUARTER'));
(0, _defineProperty2["default"])(SfDate, "LAST_QUARTER", new SfDate('LAST_QUARTER'));
(0, _defineProperty2["default"])(SfDate, "NEXT_QUARTER", new SfDate('NEXT_QUARTER'));
(0, _defineProperty2["default"])(SfDate, "NEXT_N_QUARTERS", createLiteralBuilder('NEXT_N_QUARTERS'));
(0, _defineProperty2["default"])(SfDate, "LAST_N_QUARTERS", createLiteralBuilder('LAST_N_QUARTERS'));
(0, _defineProperty2["default"])(SfDate, "THIS_YEAR", new SfDate('THIS_YEAR'));
(0, _defineProperty2["default"])(SfDate, "LAST_YEAR", new SfDate('LAST_YEAR'));
(0, _defineProperty2["default"])(SfDate, "NEXT_YEAR", new SfDate('NEXT_YEAR'));
(0, _defineProperty2["default"])(SfDate, "NEXT_N_YEARS", createLiteralBuilder('NEXT_N_YEARS'));
(0, _defineProperty2["default"])(SfDate, "LAST_N_YEARS", createLiteralBuilder('LAST_N_YEARS'));
(0, _defineProperty2["default"])(SfDate, "THIS_FISCAL_QUARTER", new SfDate('THIS_FISCAL_QUARTER'));
(0, _defineProperty2["default"])(SfDate, "LAST_FISCAL_QUARTER", new SfDate('LAST_FISCAL_QUARTER'));
(0, _defineProperty2["default"])(SfDate, "NEXT_FISCAL_QUARTER", new SfDate('NEXT_FISCAL_QUARTER'));
(0, _defineProperty2["default"])(SfDate, "THIS_FISCAL_YEAR", new SfDate('THIS_FISCAL_YEAR'));
(0, _defineProperty2["default"])(SfDate, "NEXT_N_FISCAL_QUARTERS", createLiteralBuilder('NEXT_N_FISCAL_QUARTERS'));
(0, _defineProperty2["default"])(SfDate, "LAST_N_FISCAL_QUARTERS", createLiteralBuilder('LAST_N_FISCAL_QUARTERS'));
(0, _defineProperty2["default"])(SfDate, "LAST_FISCAL_YEAR", new SfDate('LAST_FISCAL_YEAR'));
(0, _defineProperty2["default"])(SfDate, "NEXT_FISCAL_YEAR", new SfDate('NEXT_FISCAL_YEAR'));
(0, _defineProperty2["default"])(SfDate, "NEXT_N_FISCAL_YEARS", createLiteralBuilder('NEXT_N_FISCAL_YEARS'));
(0, _defineProperty2["default"])(SfDate, "LAST_N_FISCAL_YEARS", createLiteralBuilder('LAST_N_FISCAL_YEARS'));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,